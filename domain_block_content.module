<?php

/**
 * @file
 * Domain block content hooks.
 */

use Drupal\block_content\BlockContentTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\domain_block_content\DomainBlockContentBlock;
use Drupal\domain_block_content\DomainBlockContentHandler;
use Drupal\domain_block_content\EntityClone\Content\DomainBlockContentEntityCloneBase;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function domain_block_content_form_block_content_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (empty($form['domain_access'])) {
    return FALSE;
  }

  $block_content = $form_state->getFormObject()->getEntity();

  // Apply restriction only to related block content entities.
  if (!$block_content) {
    return FALSE;
  }
  if (!($block_content instanceof FieldableEntityInterface)) {
    return FALSE;
  }
  if (!$block_content->hasField(DomainBlockContentHandler::FIELD_NAME)) {
    return FALSE;
  }

  $options = $form['domain_access']['widget']['#options'];
  $used_ids = \Drupal::service('domain_block_content.handler')
    ->getAllUsedDomainIds($block_content);

  foreach ($used_ids as $used_id) {
    if (isset($options[$used_id])) {
      unset($options[$used_id]);
    }
  }

  $form['domain_access']['widget']['#title'] .= ' ' . t('[clone per domain]');
  $form['actions']['submit']['#submit'][] = 'domain_block_content_form_block_content_form_submit';

  //if ($options) {
  //  $form['domain_access']['widget']['#options'] = $options;
  //}
  //else {
  //  $form['domain_access']['#access'] = FALSE;
  //  drupal_set_message(t("This content block can't be assigned to some sub-domain because all sub-domains already in use.<br>Add new sub-domain first (or update existing block) and edit this content block again."), 'error');
  //}
}

/**
 * Custom block_content_form submit handler for invalidating related caches.
 */
function domain_block_content_form_block_content_form_submit($form, FormStateInterface $form_state) {
  \Drupal::service('domain_block_content.handler')
    ->invalidateRelatedCaches($form_state->getFormObject()->getEntity());
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function domain_block_content_form_block_content_type_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $handler = \Drupal::service('domain_block_content.handler');
  $block_type = $form_state->getFormObject()->getEntity();

  // Nothing to do: If domain entity field is not available.
  if (!$handler->getDomainField('block_content', $block_type->id())) {
    return FALSE;
  }

  $form['domain_block_content'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow add duplicates for specific domain.'),
    '#default_value' => (int) $handler->getRelationField('block_content', $block_type->id()),
  ];

  $form['#entity_builders'][] = 'domain_block_content_form_block_content_type_form_builder';
}

/**
 * Entity builder for the block content type entity.
 */
function domain_block_content_form_block_content_type_form_builder($entity_type, BlockContentTypeInterface $block_type, &$form, FormStateInterface $form_state) {
  $handler = \Drupal::service('domain_block_content.handler');

  if ($form_state->getValue('domain_block_content')) {
    $handler->addField('block_content', $block_type->id());
  }
  else {
    $handler->deleteField('block_content', $block_type->id());
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function domain_block_content_entity_type_alter(array &$entity_types) {

  if (!isset($entity_types['block_content'])) {
    return FALSE;
  }

  $entity_types['block_content']->setHandlerClass(
    'entity_clone',
    DomainBlockContentEntityCloneBase::class
  );
}

/**
 * Implements hook_block_alter().
 */
function domain_block_content_block_alter(&$definitions) {

  foreach ($definitions as $id => $definition) {
    if (strpos($id, 'block_content:') === 0) {

      $definitions[$id]['id'] = 'domain_block_content';
      $definitions[$id]['class'] = DomainBlockContentBlock::class;
      $definitions[$id]['provider'] = 'domain_block_content';
    }
  }
}

/**
 * Implements hook_block_view_alter().
 * @TODO: ReDo using content block titles in more faster way.
 */
function domain_block_content_preprocess_block(&$vars) {
  $id = isset($vars['configuration']['id']) ? $vars['configuration']['id'] : '';
  $bundle = isset($vars['content']['#bundle']) ? $vars['content']['#bundle'] : '';
  $label_display = isset($vars['configuration']['label_display']) ? $vars['configuration']['label_display'] : '';

  if (!$bundle || !$id || !$label_display) {
    return;
  }
  if (strpos($id, 'block_content:') !== 0) {
    return;
  }

  $handler = \Drupal::service('domain_block_content.handler');
  if (!$handler->getRelationField('block_content', $bundle)) {
    return;
  }

  list(, $uuid) = explode(':', $id);
  $block_id = $handler->getBlockContentDomainChildId($uuid);

  if ($block_id) {
    $block = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->load($block_id);
  }
  else {
    $block = $handler->loadBlockContentByUuid($uuid);
  }

  if (isset($block) && $block instanceof FieldableEntityInterface) {
    $languages = $block->getTranslationLanguages();
    $vars['label'] = $block->label();

    if (count($languages) > 1) {
      $lng_code = \Drupal::languageManager()->getCurrentLanguage()->getId();

      foreach ($languages as $language) {
        if ($language->getId() === $lng_code) {

          $block_translation = $block->getTranslation($lng_code);
          if ($block_translation) {
            $vars['label'] = $block_translation->label();
          }

          break;
        }
      }
    }
  }
}